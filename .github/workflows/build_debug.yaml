# .github/workflows/android-build.yml
name: Android Build

on:
  push:
    branches: [ main ]
    paths:
      - 'app/**'
      - 'build.gradle'
      - 'gradle/**'
      - 'gradle.properties'
      - 'settings.gradle'
      - 'app/CMakeLists.txt'
      - 'app/src/main/cpp/**'
      - 'app/src/main/java/**'
      - '**/*.gradle'
  pull_request:
    paths:
      - 'app/**'
      - 'build.gradle'
      - 'gradle/**'
      - 'gradle.properties'
      - 'settings.gradle'
      - 'app/CMakeLists.txt'
      - 'app/src/main/cpp/**'
      - 'app/src/main/java/**'
      - '**/*.gradle'
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    env:
      GRADLE_OPTS: "-Dorg.gradle.daemon=false -Dorg.gradle.parallel=true -Dorg.gradle.jvmargs=-Xmx4096m -XX:+HeapDumpOnOutOfMemoryError"
      ANDROID_NDK_VERSION: "25.1.8937393"
      ANDROID_CMAKE_VERSION: "3.22.1"

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          fetch-tags: true

      - name: Setup JDK 17
        id: setup-java
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '17'
          cache: 'gradle'

      - name: Cache Gradle dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      - name: Set up Android SDK (use preinstalled)
        run: |
          echo "ANDROID_HOME=$ANDROID_HOME" >> $GITHUB_ENV
          echo "$ANDROID_HOME/cmdline-tools/latest/bin:$ANDROID_HOME/platform-tools" >> $GITHUB_PATH

      - name: Install NDK and CMake
        run: |
          sdkmanager --install "ndk;${{ env.ANDROID_NDK_VERSION }}" "cmake;${{ env.ANDROID_CMAKE_VERSION }}"
          echo "ANDROID_NDK_HOME=$ANDROID_HOME/ndk/${{ env.ANDROID_NDK_VERSION }}" >> $GITHUB_ENV

      - name: Accept Android licenses
        run: |
          yes | sdkmanager --licenses > /dev/null 2>&1 || true

      - name: Make gradlew executable
        run: chmod +x ./gradlew

      - name: Build Debug APK
        run: ./gradlew assembleDebug --stacktrace
        env:
          JAVA_HOME: ${{ steps.setup-java.outputs.path }}

      - name: Verify APK exists
        run: |
          APK=$(find app/build/outputs/apk/debug -name "*.apk" | head -n1)
          if [ -z "$APK" ] || [ ! -f "$APK" ]; then
            echo "❌ APK not found!"
            exit 1
          fi
          echo "✅ APK: $APK"

      - name: Upload Debug APK
        uses: actions/upload-artifact@v4
        with:
          name: LongScreenShot-Debug-APK
          path: app/build/outputs/apk/debug/*.apk
          if-no-files-found: error